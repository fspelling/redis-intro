-> As chaves devem seguir um padrao para ajudar na busca.

-> Os padroes das chaves normalmente seguem com :(dois pontos).

-> cada grupo do nome da chave normalmente segue assim (nome_objeto:identidicador_coluna).

-> Usamos conjunto de chave e valor com hash(dicionario), quando queremos armazenar outras 
   informacoes naquela chave em especifica.

-> No redis podemos usar sessoes para persistir algumas informacoes pessoais durante um x de tempo,
   e apos esse tempo, essas informacoes serem descartadas.

-> Quando usamos SETBIT, basicamente estamos definindo um mapa de bits para aquela chave especifica,
   e a mapa de bits basicamente eh um hash porem de um mapa mapeada com um indice e o bit como o seu valor,
   com isso podemos otimizar mais a nossa memoria, pois estamos alocando apenas aquele espaco dos bits armazenados. 
   Um cenario interessante eh quando queremos difinir um mapa de usuarios que acessou ou nao o nosso sistema, 
   entre outros varios exemplos.

-> Podemos usar operadores "&&" e "OR" no redis quando se trata de um mapa de bits, e basicamente eh definido 
   nesse operador duas chaves para a validacao ser realizada, e como resultado sera retornado um novo mapa de
   bits, indicando quais items/indices do mapa foram indicados como verdadeiro nos operadores "&&" ou "OR".

-> No redis conseguimos tratar o estado conhecido como busy wait(ocupado esperando), ou seja, quando precisamos
   executar algum comando mas naquele momento aquela chave ainda nao foi populada, ou seja, esta nula, e precisamos
   seguir em nosso algoritmo so apos que retorne algo, nao precisamos ficar executando varias vezes seguidas ate que retorne,
   podemos bloquear o processamento do comando e a conexao do banco para aquela instancia por algum tempo, ate que consiga retornar 
   algo ou o tempo seja expirado, pois isso tambem ira usar muito do nosso processador, ainda mais se a maquina do redis e o programa 
   que esta consumindo o redis, forem em servidores diferentes teriamos problemas de trafegos de redes desnecessarios.

-> Uma caracteristica do redis, eh que quando se trata de valores do tipo de conjuntos, nao consiguiremos adiconar valores duplicados,
   pois nao faz sentido um conjunto de mais de uma informacao/dado repetida.

-> Lembrando que o conjunto diferentemente de uma lista nao tem ordem de entrada e saida do dado, logo para saber a quantidade
   de elementos que possui, nao usamos o comando "LENGHT", pois um conjunto nao possui tamanho diferentemente de uma lista que possui,
   pois uma lista vai crescendo ou diminuindo conforme vamos adicionando ou removendo elementos nela, ja um conjunto possui cardinalidade,
   ou seja, a cardinalidade mostrar quantos elementos aquele conjunto possui.

-> Quando trabalhamos com conjuntos ordenados, como o exemplo 'ZADD "jogadores:pontuacao" 50441 "guilherme"', o valor do elemento do conjunto
   continua sendo unico, que nesse caso seria o valor "guilherme", o valor "50441" seria basicamente o valor do rank para o redis saber fazer a 
   ordenacao desses elementos no conjunto. Portando se tentarmos executar o comando 'ZADD "jogadores:pontuacao" 50442 "guilherme"' nao ira adicionar 
   um novo elemento no conjunto, e sim estamos atualizando apenas o valor do rank para o redis fazer a ordenacao novamente, pois como ja vimos 
   os valores dos elementos do conjunto nao pode ter duplicidade, e mesmo que no comando colocamos o valor do rank diferente, o valor real ainda 
   continua sendo apenas o "guilherme", que ja existe no conjunto.

-> Quando queremos listar nossos elementos atraves do comando 'RANGE', sendo o tipo do dado uma lista ou um conjunto ordenado, uma forma de listarmos
   todos os itens seria informar o ultimo indice como '-1', pois ele ira representar o ultimo indice da lista ou do conjunto. Portanto o indice '-2'
   representa o penultimo elemento, o '-3' o antepenultimo elemento, e assim por diante.